// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`array 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/array/v/1",
  "schema": {
    "_tag": "TupleType",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "an array",
      "Symbol(@effect/schema/annotation/Title)": "array",
    },
    "elements": [],
    "isReadonly": true,
    "rest": [],
  },
}
`;

exports[`boolean 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/boolean/v/1",
  "schema": {
    "_tag": "BooleanKeyword",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a boolean",
      "Symbol(@effect/schema/annotation/Title)": "boolean",
    },
  },
}
`;

exports[`literal > \`boolean\` 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/boolean-true/v/1",
  "schema": {
    "_tag": "Literal",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Title)": "A constant boolean of value \`true\`",
    },
    "literal": true,
  },
}
`;

exports[`literal > \`null\` 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/null/v/1",
  "schema": {
    "_tag": "Literal",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Title)": "A constant null value",
    },
    "literal": null,
  },
}
`;

exports[`literal > \`number\` 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number-123/v/1",
  "schema": {
    "_tag": "Literal",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Title)": "A constant number of value \`123\`",
    },
    "literal": 123,
  },
}
`;

exports[`literal > \`string\` 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/string-abc/v/1",
  "schema": {
    "_tag": "Literal",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Title)": "A constant string of value \`abc\`",
    },
    "literal": "abc",
  },
}
`;

exports[`null 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/null/v/1",
  "schema": {
    "_tag": "Literal",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a null",
      "Symbol(@effect/schema/annotation/Identifier)": "null",
      "Symbol(@effect/schema/annotation/Title)": "null",
    },
    "literal": null,
  },
}
`;

exports[`number > exclusiveMaximum 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "exclusiveMaximum": 100,
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/LessThan),
    },
    "from": {
      "_tag": "NumberKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number",
        "Symbol(@effect/schema/annotation/Title)": "number",
      },
    },
  },
}
`;

exports[`number > exclusiveMinimum 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "exclusiveMinimum": 0,
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/GreaterThan),
    },
    "from": {
      "_tag": "NumberKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number",
        "Symbol(@effect/schema/annotation/Title)": "number",
      },
    },
  },
}
`;

exports[`number > integer 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/Identifier)": "Int",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "type": "integer",
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/Int),
    },
    "from": {
      "_tag": "NumberKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number",
        "Symbol(@effect/schema/annotation/Title)": "number",
      },
    },
  },
}
`;

exports[`number > integer, multipleOf, minimum, maximum, exclusiveMinimum, exclusiveMaximum 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/Identifier)": "Int",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "type": "integer",
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/Int),
    },
    "from": {
      "_tag": "Refinement",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number less than 100",
        "Symbol(@effect/schema/annotation/JSONSchema)": {
          "exclusiveMaximum": 100,
        },
        "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/LessThan),
      },
      "from": {
        "_tag": "Refinement",
        "annotations": {
          "Symbol(@effect/schema/annotation/Description)": "a positive number",
          "Symbol(@effect/schema/annotation/JSONSchema)": {
            "exclusiveMinimum": 0,
          },
          "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/GreaterThan),
        },
        "from": {
          "_tag": "Refinement",
          "annotations": {
            "Symbol(@effect/schema/annotation/Description)": "a number less than or equal to 100",
            "Symbol(@effect/schema/annotation/JSONSchema)": {
              "maximum": 100,
            },
            "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/LessThanOrEqualTo),
          },
          "from": {
            "_tag": "Refinement",
            "annotations": {
              "Symbol(@effect/schema/annotation/Description)": "a non-negative number",
              "Symbol(@effect/schema/annotation/JSONSchema)": {
                "minimum": 0,
              },
              "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/GreaterThanOrEqualTo),
            },
            "from": {
              "_tag": "Refinement",
              "annotations": {
                "Symbol(@effect/schema/annotation/Description)": "a number divisible by 2",
                "Symbol(@effect/schema/annotation/JSONSchema)": {
                  "multipleOf": 2,
                },
                "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/MultipleOf),
              },
              "from": {
                "_tag": "NumberKeyword",
                "annotations": {
                  "Symbol(@effect/schema/annotation/Description)": "a number",
                  "Symbol(@effect/schema/annotation/Title)": "number",
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`number > maximum 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "maximum": 100,
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/LessThanOrEqualTo),
    },
    "from": {
      "_tag": "NumberKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number",
        "Symbol(@effect/schema/annotation/Title)": "number",
      },
    },
  },
}
`;

exports[`number > minimum 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "minimum": 0,
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/GreaterThanOrEqualTo),
    },
    "from": {
      "_tag": "NumberKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number",
        "Symbol(@effect/schema/annotation/Title)": "number",
      },
    },
  },
}
`;

exports[`number > multipleOf 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "multipleOf": 2,
      },
      "Symbol(@effect/schema/annotation/Title)": "number",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/MultipleOf),
    },
    "from": {
      "_tag": "NumberKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a number",
        "Symbol(@effect/schema/annotation/Title)": "number",
      },
    },
  },
}
`;

exports[`number > number 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/number/v/1",
  "schema": {
    "_tag": "NumberKeyword",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a number",
      "Symbol(@effect/schema/annotation/Title)": "number",
    },
  },
}
`;

exports[`object 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/object/v/1",
  "schema": {
    "_tag": "TypeLiteral",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "an object",
      "Symbol(@effect/schema/annotation/Title)": "object",
    },
    "indexSignatures": [
      {
        "isReadonly": true,
        "parameter": {
          "_tag": "StringKeyword",
          "annotations": {
            "Symbol(@effect/schema/annotation/Description)": "a string",
            "Symbol(@effect/schema/annotation/Title)": "string",
          },
        },
        "type": {
          "_tag": "Union",
          "annotations": {
            "Symbol(@effect/schema/annotation/Type)": Symbol(@blockprotocol/graph/Json/Value),
          },
          "types": [
            {
              "_tag": "TypeLiteral",
              "annotations": {},
              "indexSignatures": [
                {
                  "isReadonly": true,
                  "parameter": {
                    "_tag": "StringKeyword",
                    "annotations": {
                      "Symbol(@effect/schema/annotation/Description)": "a string",
                      "Symbol(@effect/schema/annotation/Title)": "string",
                    },
                  },
                  "type": {
                    "_tag": "Suspend",
                    "annotations": {},
                    "ast": {
                      "_tag": "Union",
                      "annotations": {
                        "Symbol(@effect/schema/annotation/Type)": Symbol(@blockprotocol/graph/Json/Value),
                      },
                      "types": [
                        {
                          "_tag": "TypeLiteral",
                          "annotations": {},
                          "indexSignatures": [
                            {
                              "isReadonly": true,
                              "parameter": {
                                "_tag": "StringKeyword",
                                "annotations": {
                                  "Symbol(@effect/schema/annotation/Description)": "a string",
                                  "Symbol(@effect/schema/annotation/Title)": "string",
                                },
                              },
                              "type": {
                                "_tag": "Suspend",
                              },
                            },
                          ],
                          "propertySignatures": [],
                        },
                        {
                          "_tag": "TupleType",
                          "annotations": {},
                          "elements": [],
                          "isReadonly": true,
                          "rest": [
                            {
                              "_tag": "Suspend",
                            },
                          ],
                        },
                        {
                          "_tag": "StringKeyword",
                          "annotations": {
                            "Symbol(@effect/schema/annotation/Description)": "a string",
                            "Symbol(@effect/schema/annotation/Title)": "string",
                          },
                        },
                        {
                          "_tag": "NumberKeyword",
                          "annotations": {
                            "Symbol(@effect/schema/annotation/Description)": "a number",
                            "Symbol(@effect/schema/annotation/Title)": "number",
                          },
                        },
                        {
                          "_tag": "BooleanKeyword",
                          "annotations": {
                            "Symbol(@effect/schema/annotation/Description)": "a boolean",
                            "Symbol(@effect/schema/annotation/Title)": "boolean",
                          },
                        },
                        {
                          "_tag": "Literal",
                          "annotations": {
                            "Symbol(@effect/schema/annotation/Identifier)": "null",
                          },
                          "literal": null,
                        },
                      ],
                    },
                  },
                },
              ],
              "propertySignatures": [],
            },
            {
              "_tag": "TupleType",
              "annotations": {},
              "elements": [],
              "isReadonly": true,
              "rest": [
                {
                  "_tag": "Suspend",
                  "annotations": {},
                  "ast": {
                    "_tag": "Union",
                    "annotations": {
                      "Symbol(@effect/schema/annotation/Type)": Symbol(@blockprotocol/graph/Json/Value),
                    },
                    "types": [
                      {
                        "_tag": "TypeLiteral",
                        "annotations": {},
                        "indexSignatures": [
                          {
                            "isReadonly": true,
                            "parameter": {
                              "_tag": "StringKeyword",
                              "annotations": {
                                "Symbol(@effect/schema/annotation/Description)": "a string",
                                "Symbol(@effect/schema/annotation/Title)": "string",
                              },
                            },
                            "type": {
                              "_tag": "Suspend",
                            },
                          },
                        ],
                        "propertySignatures": [],
                      },
                      {
                        "_tag": "TupleType",
                        "annotations": {},
                        "elements": [],
                        "isReadonly": true,
                        "rest": [
                          {
                            "_tag": "Suspend",
                          },
                        ],
                      },
                      {
                        "_tag": "StringKeyword",
                        "annotations": {
                          "Symbol(@effect/schema/annotation/Description)": "a string",
                          "Symbol(@effect/schema/annotation/Title)": "string",
                        },
                      },
                      {
                        "_tag": "NumberKeyword",
                        "annotations": {
                          "Symbol(@effect/schema/annotation/Description)": "a number",
                          "Symbol(@effect/schema/annotation/Title)": "number",
                        },
                      },
                      {
                        "_tag": "BooleanKeyword",
                        "annotations": {
                          "Symbol(@effect/schema/annotation/Description)": "a boolean",
                          "Symbol(@effect/schema/annotation/Title)": "boolean",
                        },
                      },
                      {
                        "_tag": "Literal",
                        "annotations": {
                          "Symbol(@effect/schema/annotation/Identifier)": "null",
                        },
                        "literal": null,
                      },
                    ],
                  },
                },
              ],
            },
            {
              "_tag": "StringKeyword",
              "annotations": {
                "Symbol(@effect/schema/annotation/Description)": "a string",
                "Symbol(@effect/schema/annotation/Title)": "string",
              },
            },
            {
              "_tag": "NumberKeyword",
              "annotations": {
                "Symbol(@effect/schema/annotation/Description)": "a number",
                "Symbol(@effect/schema/annotation/Title)": "number",
              },
            },
            {
              "_tag": "BooleanKeyword",
              "annotations": {
                "Symbol(@effect/schema/annotation/Description)": "a boolean",
                "Symbol(@effect/schema/annotation/Title)": "boolean",
              },
            },
            {
              "_tag": "Literal",
              "annotations": {
                "Symbol(@effect/schema/annotation/Identifier)": "null",
              },
              "literal": null,
            },
          ],
        },
      },
    ],
    "propertySignatures": [],
  },
}
`;

exports[`string > maxLength 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/string/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a string",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "maxLength": 10,
      },
      "Symbol(@effect/schema/annotation/Title)": "string",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/MaxLength),
    },
    "from": {
      "_tag": "StringKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a string",
        "Symbol(@effect/schema/annotation/Title)": "string",
      },
    },
  },
}
`;

exports[`string > minLength 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/string/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a string",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "minLength": 1,
      },
      "Symbol(@effect/schema/annotation/Title)": "string",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/MinLength),
    },
    "from": {
      "_tag": "StringKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a string",
        "Symbol(@effect/schema/annotation/Title)": "string",
      },
    },
  },
}
`;

exports[`string > minLength, maxLength, pattern 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/string/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/ArbitraryHookId)": [Function],
      "Symbol(@effect/schema/TypeId/Pattern)": {
        "regex": /\\^\\[a-z\\]\\+\\$/,
      },
      "Symbol(@effect/schema/annotation/Description)": "a string",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "pattern": "^[a-z]+$",
      },
      "Symbol(@effect/schema/annotation/Title)": "string",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/Pattern),
    },
    "from": {
      "_tag": "Refinement",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a string at most 10 character(s) long",
        "Symbol(@effect/schema/annotation/JSONSchema)": {
          "maxLength": 10,
        },
        "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/MaxLength),
      },
      "from": {
        "_tag": "Refinement",
        "annotations": {
          "Symbol(@effect/schema/annotation/Description)": "a string at least 1 character(s) long",
          "Symbol(@effect/schema/annotation/JSONSchema)": {
            "minLength": 1,
          },
          "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/MinLength),
        },
        "from": {
          "_tag": "StringKeyword",
          "annotations": {
            "Symbol(@effect/schema/annotation/Description)": "a string",
            "Symbol(@effect/schema/annotation/Title)": "string",
          },
        },
      },
    },
  },
}
`;

exports[`string > pattern 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/string/v/1",
  "schema": {
    "_tag": "Refinement",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/ArbitraryHookId)": [Function],
      "Symbol(@effect/schema/TypeId/Pattern)": {
        "regex": /\\^\\[a-z\\]\\+\\$/,
      },
      "Symbol(@effect/schema/annotation/Description)": "a string",
      "Symbol(@effect/schema/annotation/JSONSchema)": {
        "pattern": "^[a-z]+$",
      },
      "Symbol(@effect/schema/annotation/Title)": "string",
      "Symbol(@effect/schema/annotation/Type)": Symbol(@effect/schema/TypeId/Pattern),
    },
    "from": {
      "_tag": "StringKeyword",
      "annotations": {
        "Symbol(@effect/schema/annotation/Description)": "a string",
        "Symbol(@effect/schema/annotation/Title)": "string",
      },
    },
  },
}
`;

exports[`string > standard 1`] = `
{
  "_id": "DataType",
  "id": "https://example.com/string/v/1",
  "schema": {
    "_tag": "StringKeyword",
    "annotations": {
      "Symbol(@blockprotocol/graph/ontology/DataType/Annotation)": [Function],
      "Symbol(@effect/schema/annotation/Description)": "a string",
      "Symbol(@effect/schema/annotation/Title)": "string",
    },
  },
}
`;
